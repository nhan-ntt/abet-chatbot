[
  {
    "question": "How do I calculate gene, site, and quartet concordance vectors for branches in a species tree using ASTRAL and IQ-TREE?",
    "answer": "The provided text describes how to calculate gene concordance factors (gCF) and site concordance factors (sCF) using IQ-TREE, but it does *not* detail how to calculate quartet concordance vectors.  The document mentions quartet concordance factors (qCF) are included in the output, but doesn't explain their calculation.  It also shows how to annotate a tree with these factors, but not how to obtain the underlying vectors themselves.\n\nTo calculate gCF and sCF using IQ-TREE:\n\n1. **Infer gene trees:** Use IQ-TREE's `-S` option with a partition file or directory containing your gene alignments.  This command will run model selection (ModelFinder) and tree inference for each gene separately.  For example:\n\n   ```bash\n   iqtree2 -s ALN_FILE -S PARTITION_FILE --prefix loci -T AUTO\n   ```\n\n2. **Estimate a species tree:** Use a suitable method like ASTRAL to build a species tree from the individual gene trees produced in step 1.  The example provided uses:\n\n   ```bash\n   astral -i loci.treefile -o astral_species.tree 2> astral_species.log\n   ```\n\n3. **Calculate concordance factors:** While the document doesn't provide the exact IQ-TREE command to calculate gCF and sCF directly from the gene trees and species tree, it strongly implies that later versions of IQ-TREE incorporate this functionality.  The text highlights the `--scfl` option for a more accurate sCF calculation (since IQ-TREE v2.2.2).  Further investigation of IQ-TREE's documentation or command-line help (`iqtree2 --help`) is needed to find the precise commands for calculating gCF and sCF, given the species tree and gene trees.  The output will contain these factors for each branch of your species tree.\n\n4. **Annotate the tree (optional):**  The provided `change_labels.R` script demonstrates how to add the calculated gCF, sCF, and qCF values to the branches of your species tree, making the results easier to visualize and interpret.\n\nIn summary, while the provided text gives a framework for calculating gCF and sCF and mentions qCF, it lacks the specific IQ-TREE commands to perform these calculations directly from gene trees and a species tree.  You will need to consult the IQ-TREE documentation for the most up-to-date commands and options.  The calculation of quartet *vectors* is not described at all.\n",
    "context": [
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating the species tree\n\nYou should estimate your species tree using whatever the best approach is for your data, for example a joint Bayesian analysis using BEAST or *BEAST, a two-step analysis e.g. using ASTRAL, or a concatentated analysis using IQ-TREE or RAxML. You may also have a species tree that has already been estimated elsewhere, and just want to map the concordance vectors onto that. In that case, you can skip this step. \r\n\r\nFor the purposes of this tutorial, we'll follow the original paper on bird phylogenomics and use ASTRAL to estimate the species tree from the gene trees we just estimated. Note that in the original paper they collapse some branches in the single-locus trees that have low aLRT (approximate Likelihood Ratio Test: a way of asking whether a branch has a length that differs significantly from zero) scores, but we skip that here for simplicity. This analysis will take just a few minutes.\r\n\r\n> Here we just calculate the species tree, we'll calculate concordance vectors and branch support values later\r\n\r\n```bash\r\nastral -i loci.treefile -o astral_species.tree 2> astral_species.log\r\n```\r\n\r\nThis analysis will produce two files. For convenience you can download these here: \r\n[astral.zip](https://github.com/user-attachments/files/15907833/astral.zip)\r\n\r\n\r\n* `astral_species.tree`: the species tree estimated from ASTRAL (this might be quite different to the tree in the paper, because we used only 400 genes, not the full set of more than 63000!)\r\n* `astral_species.log`: the log file from ASTRAL",
      "Concordance Factor\r\n\r\nSince IQ-TREE 2, we provide two measures for quantifying genealogical concordance in phylogenomic datasets: the gene concordance factor (gCF) and the site concordance factor (sCF). For every branch of a reference tree, gCF is defined as the percentage of “decisive” gene trees containing that branch. gCF is already in wide usage, but here we allow to calculate gCF while correctly accounting for variable taxon coverage among the gene trees. sCF is defined as the percentage of decisive alignment sites supporting a branch in the reference tree. sCF is a novel measure that is particularly useful when individual gene alignments are relatively uninformative, such that gene trees are uncertain. gCF and sCF complement classical measures of branch support (e.g. bootstrap) in phylogenetics by providing a full description of underlying disagreement among loci and sites.\r\n\r\nIf you use this feature please cite: \r\n\r\n__Minh B.Q., Hahn M.W., Lanfear R.__ (2020) New methods to calculate concordance factors for phylogenomic datasets. _Molecular Biology and Evolution_, 37:2727–2733. <https://doi.org/10.1093/molbev/msaa106>\r\n\r\nFor sCF we recommend that you use the more accurate version of sCF based on maximum likelihood (`--scfl` option instead of `--scf`) that is available since IQ-TREE v2.2.2. In that case please cite:\r\n\r\n__Mo Y.K., Lanfear R., Hahn M.W., and Minh B.Q.__ (2022) Updated site concordance factors minimize effects of homoplasy and taxon sampling. _Bioinformatics_, in press. <https://doi.org/10.1093/bioinformatics/btac741>\r\n\r\n> HINT: See [very nice tips on how to use and interpret concordance factors](http://www.robertlanfear.com/blog/files/concordance_factors.html) written by Rob Lanfear.\r\n{: .tip}\n\n### Inferring gene/locus trees\n\nWe now construct a set of gene/locus trees. One can manually do a for-loop, but IQ-TREE 2 provides a new convenient option `-S` to compute individual locus trees given a partition file or a directory:\r\n\r\n\tiqtree2 -s ALN_FILE -S PARTITION_FILE --prefix loci -T AUTO\r\n\t# or\r\n\tiqtree2 -S ALN_DIR --prefix loci -T AUTO\r\n\r\nIn the second case, IQ-TREE automatically detects that `ALN_DIR` is a directory and will load all alignment files within the directory. So `-S` takes the same argument as `-p` except that it performs model selection (ModelFinder) and tree inference separately for each partition/alignment. The output files are similar to those from a partitioned analysis, except that `loci.treefile` now contains a set of trees.",
      "Command reference\r\nCommprehensive documentation of command-line options.\r\nIQ-TREE is invoked from the command-line with e.g.:\r\n\r\n    iqtree -s <alignment> [OPTIONS]\r\n\r\nassuming that IQ-TREE can be run by simply entering `iqtree`. If not, please change `iqtree` to the actual path of the executable or read the [Quick start guide](Quickstart).\n\n### Ancestral sequence reconstruction\n\nThis feature is newly introduced in version 1.6. You can combine this feature with `-te` option to determine ancestral sequences along a user-defined tree (Otherwise, IQ-TREE computes ancestral sequences of the ML tree).\r\n\r\n| Option | Usage and meaning |\r\n|----------|------------------------------------------------------------------------------|\r\n| `-asr`     | Write ancestral sequences (by empirical Bayesian method) for all nodes of the tree to `.state` file. |\r\n| `-asr-min` | Specify the minimum threshold of posterior probability to determine the best ancestral state. Default: observed state frequency from the alignment. | \r\n| `-te`      | Specify a user-defined tree to determine ancestral sequences along this tree. You can assign each node of this tree with a node name, and IQ-TREE will report the ancestral sequences of the corresponding nodes. If nodes do not have names, IQ-TREE will automatically assign node names as Node1, Node2, etc. |\r\n\r\nExample usages:\r\n\r\n    iqtree -s example.phy -m JC+G -asr\r\n\r\nThe first few lines of the output file `example.phy.state` may look like this:\r\n\r\n    # Ancestral state reconstruction for all nodes in example.phy.treefile\r\n    # This file can be read in MS Excel or in R with command:\r\n    #   tab=read.table('example.phy.state',header=TRUE)\r\n    # Columns are tab-separated with following meaning:\r\n    #   Node:  Node name in the tree\r\n    #   Site:  Alignment site ID\r\n    #   State: Most likely state assignment\r\n    #   p_X:   Posterior probability for state X (empirical Bayesian method)\r\n    Node    Site    State   p_A     p_C     p_G     p_T\r\n    Node2   1       C       0.00004 0.99992 0.00002 0.00002\r\n    Node2   2       A       0.92378 0.00578 0.00577 0.06468\r\n    Node2   3       A       0.95469 0.02634 0.00675 0.01222\r\n    Node2   4       C       0.00002 0.99992 0.00002 0.00004\r\n    ...",
      "Recipes\n\n### Index Recipe\n\nThis is a collection of detailed examples analyses that combine IQ-TREE with other bits of code and/or software (hence 'recipes'). They are an attempt to go a bit beyond the usual user docs for software, getting closer to end-to-end analyses. The idea is a searchable and reproducible database of analyses to help the community do what they need to with IQ-TREE.\r\n\r\nIf you'd like to request a recipe, please head over to the issues page and use the 'recipe wanted' label, and describe in as much detail as possible (with references and example data if you can) what it is you would like.\r\n\r\n* [How to do phylogenetic placement](phylogenetic-placement)\r\n* [How to perform a Goldman-Cox test](goldman-cox-test)\r\n* [Estimating gene, site, and quartet concordance vectors](concordance-vector)\r\n* [Simulating concatenated alignments with multiple trees](Simulating-concatenated-alignments-with-multiple-trees)",
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Put concordance factors (or other numbers!) on a tree\n\nA common aim is to annotate your tree with the statistics you are interested in. The output tree above has rather unwieldy labels on each branch like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691 7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nBut we can use the tree with branch IDs to put any label on a tree. An example is in the `change_labels.R` script. As written, this script just updates the branch ID labels in the `gcf.cf.branch` tree to show the ID and the three concordance factors (the &#936;<sub>1</sub> values), each labelled with the first letter of the input data (i.e. `g` for genes, `s` for sites, and `q` for quartets). You can run this script like so:\r\n\r\n```\r\nRscript change_labels.R\r\n```\r\n\r\nThis will output a nexus-formatted tree file called `id_gcf_scf_qcf.nex`. Each branch on this tree is labelled as follows:\r\n\r\n`391-g98.54-s84.09-q98.54`\r\n\r\nThe first number is the branch ID, and the next three are the three concordance factors. This can be useful for exploring your data. For example, if you look at the part of the species tree we inferred in this recipe that groups the kiwis (genus *Apteryx*), you can see that there is a lot of concordance in this part of the tree:\r\n\r\n![kiwis](https://github.com/iqtree/iqtree2/assets/895251/e3ab2493-4105-4099-b822-5ddc4b5583aa)\r\n\r\nThe concordance factors tell you a certain amount, but to understand things better, you really need to examine the concordance vectors. \r\n\r\n> If you want to put different labels on your tree, that is relatively simple to do by editing the `change_labels.R` script, which you can get from GitHub here: [https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R](https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R)"
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  },
  {
    "question": "What are the key differences between quartet concordance factors (\"q\" values) and posterior probabilities (\"pp\" values) reported by ASTRAL?",
    "answer": "The provided text explains that ASTRAL calculates both quartet concordance factors (referred to as 'quartet frequencies', 'normalized quartet frequencies', or sometimes 'quartet support values' within the ASTRAL software) and posterior probabilities (pp).  While both relate to branch support in the species tree, they represent different aspects:\n\n* **Quartet concordance factors (qCFs or q1, q2, q3):** These represent the proportion of quartets (sets of four taxa) in the gene trees that support a particular branch in the species tree.  There are three q values because there are three possible resolutions for a quartet.  `q1` represents the most frequent quartet resolution supporting the branch, while `q2` and `q3` represent the less frequent resolutions. They describe the distribution of quartet support for a given branch across the gene trees, showing the level of concordance among gene trees for that branch.  The document explicitly states that these should *not* be interpreted as support values in the same way as posterior probabilities.\n\n* **Posterior probabilities (pp):**  ASTRAL's posterior probability (`pp1` in the provided output) is a measure of the probability that the branch is present in the true species tree, given the gene tree data. It's roughly the probability that `q1` (the highest quartet concordance factor) is indeed the most frequent resolution.  It summarizes the overall support for the branch based on the quartet concordance factors, reflecting the confidence in the branch's presence in the species tree.\n\nIn essence, qCFs provide a detailed breakdown of quartet support, showing the distribution of support across different quartet resolutions, while the posterior probability provides a single, overall probability of the branch's existence.  The posterior probability is derived from the quartet concordance factors but offers a more concise and interpretable summary of branch support.\n",
    "context": [
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next.",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### How do I interpret ultrafast bootstrap (UFBoot) support values?\n\nThe ultrafast bootstrap (UFBoot) feature (`-bb` option) was published in ([Minh et al., 2013]). \r\nOne conclusions from the __analysis of many gene trees__ is that UFBoot support values are\r\nmore unbiased: 95% support correspond roughly to a probability of 95% that a\r\nclade is true. So this has a different meaning than the normal (more conservative) \r\nbootstrap supports.\r\nFor UFBoot, you should only start to rely on a branch if its support is >=\r\n95%. Thus, the interpretations are different and you should not compare BS% with\r\nUFBoot% directly.\r\n\r\nMoreover, it is recommended to also perform the SH-aLRT test ([Guindon et al., 2010]), \r\ne.g., by adding `-alrt 1000` into the IQ-TREE command line. Each branch will\r\nthen be assigned with SH-aLRT and UFBoot supports. One would be more confident \r\nif a clade has its SH-aLRT >= 80% and UFboot >= 95%. \r\n\r\n> NOTE: These recommendations only apply to single gene trees. If you reconstruct\r\n> a \"concatenation\" tree from many genes in a phylogenomic analysis, they do not\r\n> hold anymore. In fact, UFBoot supports and even the more conservative Felsenstein's \r\n> bootstrap supports will tend to be 100% and there has been plenty of literature\r\n> about this issue. You are recommended to compute concordance factors for\r\n> any phylogenomic analysis.",
      "Assessing phylogenetic assumptions\r\nIt is important to know that phylogenetic models rely on various simplifying assumptions to\r\nease computations. If your data severely violate these assumptions, it might\r\ncause bias in phylogenetic estimates of tree topologies and other model\r\nparameters. Some common assumptions include _treelikeness_ (all sites\r\nin the alignment have evolved under the same tree), _stationarity_ (nucleotide/amino-acid\r\nfrequencies remain constant over time), _reversibility_ (substitutions are equally\r\nlikely in both directions), and _homogeneity_ (substitution rates remain constant over time).\r\n\r\nThis document shows several ways to check some of these assumptions that you\r\nshould perform before doing phylogenetic analysis.\n\n### Likelihood mapping\n\nLikelihood mapping ([Strimmer and von Haeseler, 1997]) is a visualisation method\r\nto display the phylogenetic information of an alignment. It visualises the _treelikeness_\r\nof all quartets in a single triangular graph and therefore renders a quick\r\ninterpretation of the phylogenetic content.\r\n\r\nA simple likelihood mapping analysis can be conducted with:\r\n\r\n\tiqtree -s example.phy -lmap 2000 -n 0\r\n\r\nwhere `-lmap` option specify the number of quartets of taxa that will be drawn randomly\r\nfrom the alignment. `-n 0` tells IQ-TREE to stop the analysis right after running the\r\nlikelihood mapping. IQ-TREE will print the result in the `.iqtree` report file as well\r\nas the likelihood mapping plot `.lmap.svg` (in SVG format) and `.lmap.eps` file (in EPS\r\nfigure format).\r\n\r\nYou can now view the likelihood mapping plot file `example.phy.lmap.svg`, which looks like this:\r\n\r\n![Likelihood mapping plot.](images/example.phy.lmap.pdf) \r\n\r\nIt shows phylogenetic information of the alignment `example.phy`. \r\n\r\n* Top sub-figure: distribution of quartets depicted by dots on the likelihood mapping plot. \r\n* Left sub-figure: percentages of quartets falling in each of the three areas. The \r\n  three areas show support for one of the different groupings like (a,b)-(c,d).\r\n* Right sub-figure: percentages of quartets falling in each of the seven areas. \r\n  Quartets falling into the three corners are informative and called fully-resolved quartets. \r\n  Those in three rectangles are partly informative (partly resolved quartets) and those in the center are uninformative\r\n  (unresolved quartets). A good data set should have high number of fully resolved quartets \r\n  and low number of unresolved quartets. \r\n\r\nThe meanings can also be found in the `LIKELIHOOD MAPPING STATISTICS` section of the \r\nreport file `example.phy.iqtree`:\r\n\r\n\r\n    LIKELIHOOD MAPPING STATISTICS\r\n    -----------------------------\r\n\r\n               (a,b)-(c,d)                              (a,b)-(c,d)      \r\n                    /\\                                      /\\           \r\n                   /  \\                                    /  \\          \r\n                  /    \\                                  /  1 \\         \r\n                 /  a1  \\                                / \\  / \\        \r\n                /\\      /\\                              /   \\/   \\       \r\n               /  \\    /  \\                            /    /\\    \\      \r\n              /    \\  /    \\                          / 6  /  \\  4 \\     \r\n             /      \\/      \\                        /\\   /  7 \\   /\\    \r\n            /        |       \\                      /  \\ /______\\ /  \\   \r\n           /   a3    |    a2  \\                    / 3  |    5   |  2 \\  \r\n          /__________|_________\\                  /_____|________|_____\\ \r\n    (a,d)-(b,c)            (a,c)-(b,d)      (a,d)-(b,c)            (a,c)-(b,d) \r\n\r\n    Division of the likelihood mapping plots into 3 or 7 areas.\r\n    On the left the areas show support for one of the different groupings\r\n    like (a,b|c,d).\r\n    On the right the right quartets falling into the areas 1, 2 and 3 are\r\n    informative. Those in the rectangles 4, 5 and 6 are partly informative\r\n    and those in the center (7) are not informative.\r\n    .....\r\n\r\n\r\nThe [command reference](Command-Reference#likelihood-mapping-analysis) will provide\r\nmore options and how to perform 2-, 3-, or 4-cluster likelihood mapping analysis.\r\n\r\n\r\n[Strimmer and von Haeseler, 1997]: http://www.pnas.org/content/94/13/6815.long\r\n[Naser-Khdour et al., 2019]: https://doi.org/10.1093/gbe/evz193",
      "Concordance Factor\r\n\r\nSince IQ-TREE 2, we provide two measures for quantifying genealogical concordance in phylogenomic datasets: the gene concordance factor (gCF) and the site concordance factor (sCF). For every branch of a reference tree, gCF is defined as the percentage of “decisive” gene trees containing that branch. gCF is already in wide usage, but here we allow to calculate gCF while correctly accounting for variable taxon coverage among the gene trees. sCF is defined as the percentage of decisive alignment sites supporting a branch in the reference tree. sCF is a novel measure that is particularly useful when individual gene alignments are relatively uninformative, such that gene trees are uncertain. gCF and sCF complement classical measures of branch support (e.g. bootstrap) in phylogenetics by providing a full description of underlying disagreement among loci and sites.\r\n\r\nIf you use this feature please cite: \r\n\r\n__Minh B.Q., Hahn M.W., Lanfear R.__ (2020) New methods to calculate concordance factors for phylogenomic datasets. _Molecular Biology and Evolution_, 37:2727–2733. <https://doi.org/10.1093/molbev/msaa106>\r\n\r\nFor sCF we recommend that you use the more accurate version of sCF based on maximum likelihood (`--scfl` option instead of `--scf`) that is available since IQ-TREE v2.2.2. In that case please cite:\r\n\r\n__Mo Y.K., Lanfear R., Hahn M.W., and Minh B.Q.__ (2022) Updated site concordance factors minimize effects of homoplasy and taxon sampling. _Bioinformatics_, in press. <https://doi.org/10.1093/bioinformatics/btac741>\r\n\r\n> HINT: See [very nice tips on how to use and interpret concordance factors](http://www.robertlanfear.com/blog/files/concordance_factors.html) written by Rob Lanfear.\r\n{: .tip}\n\n### Inferring gene/locus trees\n\nWe now construct a set of gene/locus trees. One can manually do a for-loop, but IQ-TREE 2 provides a new convenient option `-S` to compute individual locus trees given a partition file or a directory:\r\n\r\n\tiqtree2 -s ALN_FILE -S PARTITION_FILE --prefix loci -T AUTO\r\n\t# or\r\n\tiqtree2 -S ALN_DIR --prefix loci -T AUTO\r\n\r\nIn the second case, IQ-TREE automatically detects that `ALN_DIR` is a directory and will load all alignment files within the directory. So `-S` takes the same argument as `-p` except that it performs model selection (ModelFinder) and tree inference separately for each partition/alignment. The output files are similar to those from a partitioned analysis, except that `loci.treefile` now contains a set of trees.",
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Introduction\n\nThis recipe provides a worked example of estimating gene, site, and quartet concordance vectors using IQ-TREE2 and ASTRAL-III, beginning with a set of individual locus alignments. A concordance vector consists of four numbers, which include the concordance factor and three other numbers describing all the discordant trees:\r\n\r\n* &#936;<sub>1</sub> (the concordance factor for the branch of interest in the species tree)\r\n* &#936;<sub>2</sub> (the largest of the two discordance factors from a single NNI rearrangement of the branch of interest)\r\n* &#936;<sub>3</sub> (the smallest of the two discordance factors from a single NNI rearrangement of the branch of interest)\r\n* &#936;<sub>4</sub> (the sum of the discordance factors that do not make up &#936;<sub>2</sub> and &#936;<sub>3</sub>; note that site and quartet concordance factors always assume that this number is zero)\r\n\r\n> Citation: this recipe accompanies the paper \"[The meaning and measure of concordance factors in phylogenomics](https://doi.org/10.32942/X27617)\" by Rob Lanfear and Matt Hahn. Please cite that paper if you use this recipe. This article also describes concordance vectors in a lot more detail."
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  },
  {
    "question": "Why is it important to specify a fixed tree topology when using ASTRAL for concordance vector calculation?",
    "answer": "The provided text focuses on using ASTRAL to estimate a species tree *before* calculating concordance factors with IQ-TREE.  It doesn't discuss the importance of a fixed topology *during* the concordance factor calculation itself using IQ-TREE.  The IQ-TREE commands shown use `-t concat.treefile` to specify a reference tree, but this is a *species tree* (estimated beforehand by ASTRAL), not necessarily a fixed topology imposed on the concordance factor calculation.  The importance of a fixed topology is not explicitly addressed in relation to IQ-TREE's concordance factor calculation.\n",
    "context": [
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating the species tree\n\nYou should estimate your species tree using whatever the best approach is for your data, for example a joint Bayesian analysis using BEAST or *BEAST, a two-step analysis e.g. using ASTRAL, or a concatentated analysis using IQ-TREE or RAxML. You may also have a species tree that has already been estimated elsewhere, and just want to map the concordance vectors onto that. In that case, you can skip this step. \r\n\r\nFor the purposes of this tutorial, we'll follow the original paper on bird phylogenomics and use ASTRAL to estimate the species tree from the gene trees we just estimated. Note that in the original paper they collapse some branches in the single-locus trees that have low aLRT (approximate Likelihood Ratio Test: a way of asking whether a branch has a length that differs significantly from zero) scores, but we skip that here for simplicity. This analysis will take just a few minutes.\r\n\r\n> Here we just calculate the species tree, we'll calculate concordance vectors and branch support values later\r\n\r\n```bash\r\nastral -i loci.treefile -o astral_species.tree 2> astral_species.log\r\n```\r\n\r\nThis analysis will produce two files. For convenience you can download these here: \r\n[astral.zip](https://github.com/user-attachments/files/15907833/astral.zip)\r\n\r\n\r\n* `astral_species.tree`: the species tree estimated from ASTRAL (this might be quite different to the tree in the paper, because we used only 400 genes, not the full set of more than 63000!)\r\n* `astral_species.log`: the log file from ASTRAL",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### Why does IQ-TREE complain about the use of +ASC model?\n\nWhen using ascertainment bias correction (ASC) model, sometimes you may get an error message:\r\n\r\n`ERROR: Invaid use of +ASC because of ... invariant sites in the alignment`\r\n\r\nor when performing model testing:\r\n\r\n`Skipped since +ASC is not applicable`\r\n\r\nThis is because your alignment contains _invariant_ sites (columns), which violate the mathematical condition of the model. The invariant sites can be:\r\n\r\n* Constant sites: containing a single character state over all sequences. For example, all sequences show an `A` (Adenine) at a particular site in a DNA alignment. \r\n* Partially constant sites: containing a single character, gap or unknown character. For example, at a particular site some sequences show a `G` (Guanine), some sequences have `-` (gap) and the other have `N`.\r\n* Ambiguously constant sites: For example, some sequences show a `C` (Cytosine), some show a `Y` (meaning `C` or `T`) and some show a `-` (gap). \r\n\r\nAll these sites must be removed from the alignment before a +ASC model can be applied.\r\n\r\n>**TIP**: Starting with IQ-TREE version 1.5.0, an output alignment file with suffix `.varsites` is written in such cases, which contain only variable sites from the input alignment. The `.varsites` alignment can then be used with the +ASC model.\r\n{: .tip}",
      "Assessing phylogenetic assumptions\r\nIt is important to know that phylogenetic models rely on various simplifying assumptions to\r\nease computations. If your data severely violate these assumptions, it might\r\ncause bias in phylogenetic estimates of tree topologies and other model\r\nparameters. Some common assumptions include _treelikeness_ (all sites\r\nin the alignment have evolved under the same tree), _stationarity_ (nucleotide/amino-acid\r\nfrequencies remain constant over time), _reversibility_ (substitutions are equally\r\nlikely in both directions), and _homogeneity_ (substitution rates remain constant over time).\r\n\r\nThis document shows several ways to check some of these assumptions that you\r\nshould perform before doing phylogenetic analysis.\n\n### Likelihood mapping\n\nLikelihood mapping ([Strimmer and von Haeseler, 1997]) is a visualisation method\r\nto display the phylogenetic information of an alignment. It visualises the _treelikeness_\r\nof all quartets in a single triangular graph and therefore renders a quick\r\ninterpretation of the phylogenetic content.\r\n\r\nA simple likelihood mapping analysis can be conducted with:\r\n\r\n\tiqtree -s example.phy -lmap 2000 -n 0\r\n\r\nwhere `-lmap` option specify the number of quartets of taxa that will be drawn randomly\r\nfrom the alignment. `-n 0` tells IQ-TREE to stop the analysis right after running the\r\nlikelihood mapping. IQ-TREE will print the result in the `.iqtree` report file as well\r\nas the likelihood mapping plot `.lmap.svg` (in SVG format) and `.lmap.eps` file (in EPS\r\nfigure format).\r\n\r\nYou can now view the likelihood mapping plot file `example.phy.lmap.svg`, which looks like this:\r\n\r\n![Likelihood mapping plot.](images/example.phy.lmap.pdf) \r\n\r\nIt shows phylogenetic information of the alignment `example.phy`. \r\n\r\n* Top sub-figure: distribution of quartets depicted by dots on the likelihood mapping plot. \r\n* Left sub-figure: percentages of quartets falling in each of the three areas. The \r\n  three areas show support for one of the different groupings like (a,b)-(c,d).\r\n* Right sub-figure: percentages of quartets falling in each of the seven areas. \r\n  Quartets falling into the three corners are informative and called fully-resolved quartets. \r\n  Those in three rectangles are partly informative (partly resolved quartets) and those in the center are uninformative\r\n  (unresolved quartets). A good data set should have high number of fully resolved quartets \r\n  and low number of unresolved quartets. \r\n\r\nThe meanings can also be found in the `LIKELIHOOD MAPPING STATISTICS` section of the \r\nreport file `example.phy.iqtree`:\r\n\r\n\r\n    LIKELIHOOD MAPPING STATISTICS\r\n    -----------------------------\r\n\r\n               (a,b)-(c,d)                              (a,b)-(c,d)      \r\n                    /\\                                      /\\           \r\n                   /  \\                                    /  \\          \r\n                  /    \\                                  /  1 \\         \r\n                 /  a1  \\                                / \\  / \\        \r\n                /\\      /\\                              /   \\/   \\       \r\n               /  \\    /  \\                            /    /\\    \\      \r\n              /    \\  /    \\                          / 6  /  \\  4 \\     \r\n             /      \\/      \\                        /\\   /  7 \\   /\\    \r\n            /        |       \\                      /  \\ /______\\ /  \\   \r\n           /   a3    |    a2  \\                    / 3  |    5   |  2 \\  \r\n          /__________|_________\\                  /_____|________|_____\\ \r\n    (a,d)-(b,c)            (a,c)-(b,d)      (a,d)-(b,c)            (a,c)-(b,d) \r\n\r\n    Division of the likelihood mapping plots into 3 or 7 areas.\r\n    On the left the areas show support for one of the different groupings\r\n    like (a,b|c,d).\r\n    On the right the right quartets falling into the areas 1, 2 and 3 are\r\n    informative. Those in the rectangles 4, 5 and 6 are partly informative\r\n    and those in the center (7) are not informative.\r\n    .....\r\n\r\n\r\nThe [command reference](Command-Reference#likelihood-mapping-analysis) will provide\r\nmore options and how to perform 2-, 3-, or 4-cluster likelihood mapping analysis.\r\n\r\n\r\n[Strimmer and von Haeseler, 1997]: http://www.pnas.org/content/94/13/6815.long\r\n[Naser-Khdour et al., 2019]: https://doi.org/10.1093/gbe/evz193",
      "Concordance Factor\r\n\r\nSince IQ-TREE 2, we provide two measures for quantifying genealogical concordance in phylogenomic datasets: the gene concordance factor (gCF) and the site concordance factor (sCF). For every branch of a reference tree, gCF is defined as the percentage of “decisive” gene trees containing that branch. gCF is already in wide usage, but here we allow to calculate gCF while correctly accounting for variable taxon coverage among the gene trees. sCF is defined as the percentage of decisive alignment sites supporting a branch in the reference tree. sCF is a novel measure that is particularly useful when individual gene alignments are relatively uninformative, such that gene trees are uncertain. gCF and sCF complement classical measures of branch support (e.g. bootstrap) in phylogenetics by providing a full description of underlying disagreement among loci and sites.\r\n\r\nIf you use this feature please cite: \r\n\r\n__Minh B.Q., Hahn M.W., Lanfear R.__ (2020) New methods to calculate concordance factors for phylogenomic datasets. _Molecular Biology and Evolution_, 37:2727–2733. <https://doi.org/10.1093/molbev/msaa106>\r\n\r\nFor sCF we recommend that you use the more accurate version of sCF based on maximum likelihood (`--scfl` option instead of `--scf`) that is available since IQ-TREE v2.2.2. In that case please cite:\r\n\r\n__Mo Y.K., Lanfear R., Hahn M.W., and Minh B.Q.__ (2022) Updated site concordance factors minimize effects of homoplasy and taxon sampling. _Bioinformatics_, in press. <https://doi.org/10.1093/bioinformatics/btac741>\r\n\r\n> HINT: See [very nice tips on how to use and interpret concordance factors](http://www.robertlanfear.com/blog/files/concordance_factors.html) written by Rob Lanfear.\r\n{: .tip}\n\n### Gene concordance factor (gCF)\n\nGiven the species tree `concat.treefile` and the set of locus trees `loci.treefile` computed above, you can calculate gCF for each branch of the species tree as the fraction of decisive gene trees concordant with this branch:\r\n\r\n\tiqtree2 -t concat.treefile --gcf loci.treefile --prefix concord\r\n \t\r\nNote that `-t` accepts any reference tree (e.g., by coalescent/reconciliation approach) and `--gcf` accepts any set of trees (e.g. locus trees and bootstrap trees), which may contain a subset of taxa from the reference tree. IQ-Tree will write three files:\r\n\r\n* `concord.cf.tree`: Newick tree with gCF assigned for each internal branch of the reference tree. If the reference tree already has some branch label (such as bootstrap support in this case), gCF will be appended to the existing label separated by a `/`.\r\n* `concord.cf.branch`: Newick tree with internal branch IDs.\r\n* `concord.cf.stat`: A tab-separated table with gCF and gDF (gene discordance factor) for every internal branch (rows of the table). The ID column can be linked with `concord.cf.branch` file. This file can be read in R to do some plot (see below).\r\n\r\nIf you omit `--prefix`, all output files will be written to `concat.treefile.*`.",
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Put concordance factors (or other numbers!) on a tree\n\nA common aim is to annotate your tree with the statistics you are interested in. The output tree above has rather unwieldy labels on each branch like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691 7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nBut we can use the tree with branch IDs to put any label on a tree. An example is in the `change_labels.R` script. As written, this script just updates the branch ID labels in the `gcf.cf.branch` tree to show the ID and the three concordance factors (the &#936;<sub>1</sub> values), each labelled with the first letter of the input data (i.e. `g` for genes, `s` for sites, and `q` for quartets). You can run this script like so:\r\n\r\n```\r\nRscript change_labels.R\r\n```\r\n\r\nThis will output a nexus-formatted tree file called `id_gcf_scf_qcf.nex`. Each branch on this tree is labelled as follows:\r\n\r\n`391-g98.54-s84.09-q98.54`\r\n\r\nThe first number is the branch ID, and the next three are the three concordance factors. This can be useful for exploring your data. For example, if you look at the part of the species tree we inferred in this recipe that groups the kiwis (genus *Apteryx*), you can see that there is a lot of concordance in this part of the tree:\r\n\r\n![kiwis](https://github.com/iqtree/iqtree2/assets/895251/e3ab2493-4105-4099-b822-5ddc4b5583aa)\r\n\r\nThe concordance factors tell you a certain amount, but to understand things better, you really need to examine the concordance vectors. \r\n\r\n> If you want to put different labels on your tree, that is relatively simple to do by editing the `change_labels.R` script, which you can get from GitHub here: [https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R](https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R)"
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  },
  {
    "question": "What is the purpose of the -blfix option in IQ-TREE when estimating branch lengths in coalescent units, and why should the sCFs from this analysis be disregarded?",
    "answer": "The provided text explains the `-blfix` option in the context of speeding up the calculation of site concordance factors (sCFs) in IQ-TREE, not in the context of estimating branch lengths in coalescent units.  The `-blfix` option is used to reuse branch lengths calculated in a previous analysis (e.g., a concatenated tree analysis) when subsequently calculating sCFs. This avoids redundant computation, saving time, especially on large datasets.  The description does *not* mention that the resulting sCFs should be disregarded.  In fact, it implies the opposite: that using `-blfix` allows for a faster, but still valid, calculation of sCFs.\n",
    "context": [
      "Concordance Factor\r\n\r\nSince IQ-TREE 2, we provide two measures for quantifying genealogical concordance in phylogenomic datasets: the gene concordance factor (gCF) and the site concordance factor (sCF). For every branch of a reference tree, gCF is defined as the percentage of “decisive” gene trees containing that branch. gCF is already in wide usage, but here we allow to calculate gCF while correctly accounting for variable taxon coverage among the gene trees. sCF is defined as the percentage of decisive alignment sites supporting a branch in the reference tree. sCF is a novel measure that is particularly useful when individual gene alignments are relatively uninformative, such that gene trees are uncertain. gCF and sCF complement classical measures of branch support (e.g. bootstrap) in phylogenetics by providing a full description of underlying disagreement among loci and sites.\r\n\r\nIf you use this feature please cite: \r\n\r\n__Minh B.Q., Hahn M.W., Lanfear R.__ (2020) New methods to calculate concordance factors for phylogenomic datasets. _Molecular Biology and Evolution_, 37:2727–2733. <https://doi.org/10.1093/molbev/msaa106>\r\n\r\nFor sCF we recommend that you use the more accurate version of sCF based on maximum likelihood (`--scfl` option instead of `--scf`) that is available since IQ-TREE v2.2.2. In that case please cite:\r\n\r\n__Mo Y.K., Lanfear R., Hahn M.W., and Minh B.Q.__ (2022) Updated site concordance factors minimize effects of homoplasy and taxon sampling. _Bioinformatics_, in press. <https://doi.org/10.1093/bioinformatics/btac741>\r\n\r\n> HINT: See [very nice tips on how to use and interpret concordance factors](http://www.robertlanfear.com/blog/files/concordance_factors.html) written by Rob Lanfear.\r\n{: .tip}\n\n### Calculating concordance factors on very large datasets\n\nIf you have a dataset which takes a long time to analyse on your machine, there are a couple of adjustments you can make to the above process to keep things as fast as possible. \r\n\r\nSpecifically, because the new version of the site concordance factor uses likelihoods, we can make sure to re-use as much information as possible. \r\n\r\nSo, suppose that in the first step of the analysis you ran the command as above:\r\n\r\n\tiqtree2 -s ALN_FILE -p PARTITION_FILE --prefix concat -B 1000 -T AUTO\r\n\r\nThat command will have figured out for you the model of evolution, all the parameters of that model, and the branch lengths of the corresponding tree. We can re-use all of that useful information in the final step. It just takes a little bit of effort to find what you need.\r\n\r\nFirst we'll get the model parameters we need. If you take a look at the end of the `concat.iqtree` file you will find a little section called `ALISIM COMMAND`. You can find it like this on mac/linux (or just open the `concat.iqtree` file in a text editor and scroll to the end:\r\n\r\n\ttail concat.iqtree\r\n\r\nYou should see something like this:\r\n\r\n\tALISIM COMMAND\r\n\t--------------\r\n\t--alisim simulated_MSA -t concat.treefile -m \"Q.plant+I{0.177536}+R8{0.147295,0.0935335,0.114418,0.190578,0.108376,0.538389,0.113777,0.804005,0.0898871,1.30004,0.137297,1.95653,0.0958285,3.48597,0.0155849,6.09904}\" --length 432014\r\n\r\nThat bit after the `-m` (not including the `--length` stuff) is what you need to specify the Maximum Likelihood model parameters when you run the `--scfl` command. Note that it's vital that you use the model from YOUR analysis, not the example provided here. (That's why this bit is an a longer and more detailed section at the end of the tutorial.)\r\n\r\nWe also want to re-use the branch lengths we calculated in step 1, and we can do that easily with the `-blfix` option.\r\n\r\nTo put all of that together, we are going to change the final command of the tutorial above, where we calculate the site concordance factors from one of these two options (depending on if your alignments are per-locus, or all concatentated):\r\n\r\n\r\n\t# simple command, with per-locus alignments\r\n\t# compute site concordance factor using likelihood with v2.2.2\r\n\tiqtree2 -te concat.treefile -p ALN_DIR --scfl 100 --prefix concord2\r\n\r\n\t# simple command, with concatenated alignments\r\n\t# compute site concordance factor using likelihood with v2.2.2\r\n\tiqtree2 -te concat.treefile -s ALN_FILE --scfl 100 --prefix concord2\r\n\r\nTo one of these, where we add the two extra commands via `-blfix` and `-m`, to fix all the parameters we already calculated. A reminder - do NOT use the exact commandlines above. You have to replace everything after the `-m` with what you found in your own `concat.iqtree` file:\r\n\r\n\t# faster analysis, using pre-computed model parameters, with per-locus alignments\r\n\t# compute site concordance factor using likelihood with v2.2.2\r\n\tiqtree2 -te concat.treefile -p ALN_DIR --scfl 100 --prefix concord2 -blfix -m \"Q.plant+I{0.177536}+R8{0.147295,0.0935335,0.114418,0.190578,0.108376,0.538389,0.113777,0.804005,0.0898871,1.30004,0.137297,1.95653,0.0958285,3.48597,0.0155849,6.09904}\"\r\n\r\n\t# faster analysis, using pre-computed model parameters, with concatenated alignments\r\n\t# compute site concordance factor using likelihood with v2.2.2\r\n\tiqtree2 -te concat.treefile -s ALN_FILE --scfl 100 --prefix concord2 -blfix -m \"Q.plant+I{0.177536}+R8{0.147295,0.0935335,0.114418,0.190578,0.108376,0.538389,0.113777,0.804005,0.0898871,1.30004,0.137297,1.95653,0.0958285,3.48597,0.0155849,6.09904}\"\r\n\r\nAll this does is tells IQ-TREE to use the model parameters and branch lengths you already calculated. On large datasets this can save a lot of analysis time.\r\n\r\n[Mo et al., 2022]: https://doi.org/10.1093/bioinformatics/btac741",
      "Substitution models\r\nAll common substitution models and usages.\r\nIQ-TREE supports a wide range of substitution models, including advanced partition and mixture models. This guide gives a detailed information of all available models.\r\n\r\nTIP: If you do not know which model to use, simply run IQ-TREE with the standard model selection (`-m TEST` option) or the new ModelFinder (`-m MFP`). It automatically determines best-fit model for your data.\n\n### Ascertainment bias correction\n\nAn ascertainment bias correction (`+ASC`) model ([Lewis, 2001]) should be applied if the alignment does not contain constant sites (such as morphological or SNPs data). For example:\r\n\r\n* `MK+ASC`: For morphological data.\r\n* `GTR+ASC`: For SNPs data.\r\n\r\n`+ASC` will correct the likelihood conditioned on variable sites. Without `+ASC`, the branch lengths might be overestimated.",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### How does IQ-TREE treat identical sequences?\n\nAmong a group of identical sequences, IQ-TREE will keep the first two and ignore the rest. If the sequence is the 2nd one, it will be “kept for subsequent analysis”. If it is the 3rd or more, it will be “ignored but added at the end”. The rationale for this is to still be able to calculate the bootstrap support for this group of identical sequences: it is not always 100%. Because by bootstrap resampling, on average only two third of the sites will be present in a bootstrap alignment (due to sampling with replacement), and suddenly another sequence not in this group may actually become identical to this group of sequences. In that case, the bootstrap value will be < 100%.\r\n\r\nTherefore, the `.uniqueseq.phy` printed by IQ-TREE may still contain the identical sequences, but no more than two of each identical group.",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### How do I interpret ultrafast bootstrap (UFBoot) support values?\n\nThe ultrafast bootstrap (UFBoot) feature (`-bb` option) was published in ([Minh et al., 2013]). \r\nOne conclusions from the __analysis of many gene trees__ is that UFBoot support values are\r\nmore unbiased: 95% support correspond roughly to a probability of 95% that a\r\nclade is true. So this has a different meaning than the normal (more conservative) \r\nbootstrap supports.\r\nFor UFBoot, you should only start to rely on a branch if its support is >=\r\n95%. Thus, the interpretations are different and you should not compare BS% with\r\nUFBoot% directly.\r\n\r\nMoreover, it is recommended to also perform the SH-aLRT test ([Guindon et al., 2010]), \r\ne.g., by adding `-alrt 1000` into the IQ-TREE command line. Each branch will\r\nthen be assigned with SH-aLRT and UFBoot supports. One would be more confident \r\nif a clade has its SH-aLRT >= 80% and UFboot >= 95%. \r\n\r\n> NOTE: These recommendations only apply to single gene trees. If you reconstruct\r\n> a \"concatenation\" tree from many genes in a phylogenomic analysis, they do not\r\n> hold anymore. In fact, UFBoot supports and even the more conservative Felsenstein's \r\n> bootstrap supports will tend to be 100% and there has been plenty of literature\r\n> about this issue. You are recommended to compute concordance factors for\r\n> any phylogenomic analysis.",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### Why does IQ-TREE complain about the use of +ASC model?\n\nWhen using ascertainment bias correction (ASC) model, sometimes you may get an error message:\r\n\r\n`ERROR: Invaid use of +ASC because of ... invariant sites in the alignment`\r\n\r\nor when performing model testing:\r\n\r\n`Skipped since +ASC is not applicable`\r\n\r\nThis is because your alignment contains _invariant_ sites (columns), which violate the mathematical condition of the model. The invariant sites can be:\r\n\r\n* Constant sites: containing a single character state over all sequences. For example, all sequences show an `A` (Adenine) at a particular site in a DNA alignment. \r\n* Partially constant sites: containing a single character, gap or unknown character. For example, at a particular site some sequences show a `G` (Guanine), some sequences have `-` (gap) and the other have `N`.\r\n* Ambiguously constant sites: For example, some sequences show a `C` (Cytosine), some show a `Y` (meaning `C` or `T`) and some show a `-` (gap). \r\n\r\nAll these sites must be removed from the alignment before a +ASC model can be applied.\r\n\r\n>**TIP**: Starting with IQ-TREE version 1.5.0, an output alignment file with suffix `.varsites` is written in such cases, which contain only variable sites from the input alignment. The `.varsites` alignment can then be used with the +ASC model.\r\n{: .tip}"
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  },
  {
    "question": "How can I interpret the values reported in the gcf.cf.stat, scfl.cf.stat, and coalescent_bl.cf.stat output files from IQ-TREE?",
    "answer": "The provided text describes the `concord.cf.stat` file, which contains gene concordance factor (gCF) data, but it does not mention `scfl.cf.stat` or `coalescent_bl.cf.stat` files.  Therefore, I cannot answer how the values in those files are interpreted.\n\nThe `concord.cf.stat` file, produced using the `--gcf` option in IQ-TREE, is a tab-separated table. Each row represents an internal branch in the reference tree.  The table includes at least two columns:\n\n* **ID:**  This column contains an identifier for each branch, corresponding to the branch IDs in the `concord.cf.branch` file (a Newick tree with internal branch IDs).\n* **gCF:** This column contains the gene concordance factor (gCF) for the branch.  The gCF represents the percentage of \"decisive\" gene trees that support the branch in the reference tree. A higher gCF value indicates stronger support for that branch from the gene trees.\n* **gDF:** This column contains the gene discordance factor (gDF), which is related to gCF.  The exact calculation of gDF is not specified in the provided text but it is implied to be a measure of discordance among gene trees.\n\nThe text suggests that the `concord.cf.stat` file can be easily imported into R for further analysis and visualization.\n",
    "context": [
      "Concordance Factor\r\n\r\nSince IQ-TREE 2, we provide two measures for quantifying genealogical concordance in phylogenomic datasets: the gene concordance factor (gCF) and the site concordance factor (sCF). For every branch of a reference tree, gCF is defined as the percentage of “decisive” gene trees containing that branch. gCF is already in wide usage, but here we allow to calculate gCF while correctly accounting for variable taxon coverage among the gene trees. sCF is defined as the percentage of decisive alignment sites supporting a branch in the reference tree. sCF is a novel measure that is particularly useful when individual gene alignments are relatively uninformative, such that gene trees are uncertain. gCF and sCF complement classical measures of branch support (e.g. bootstrap) in phylogenetics by providing a full description of underlying disagreement among loci and sites.\r\n\r\nIf you use this feature please cite: \r\n\r\n__Minh B.Q., Hahn M.W., Lanfear R.__ (2020) New methods to calculate concordance factors for phylogenomic datasets. _Molecular Biology and Evolution_, 37:2727–2733. <https://doi.org/10.1093/molbev/msaa106>\r\n\r\nFor sCF we recommend that you use the more accurate version of sCF based on maximum likelihood (`--scfl` option instead of `--scf`) that is available since IQ-TREE v2.2.2. In that case please cite:\r\n\r\n__Mo Y.K., Lanfear R., Hahn M.W., and Minh B.Q.__ (2022) Updated site concordance factors minimize effects of homoplasy and taxon sampling. _Bioinformatics_, in press. <https://doi.org/10.1093/bioinformatics/btac741>\r\n\r\n> HINT: See [very nice tips on how to use and interpret concordance factors](http://www.robertlanfear.com/blog/files/concordance_factors.html) written by Rob Lanfear.\r\n{: .tip}\n\n### Gene concordance factor (gCF)\n\nGiven the species tree `concat.treefile` and the set of locus trees `loci.treefile` computed above, you can calculate gCF for each branch of the species tree as the fraction of decisive gene trees concordant with this branch:\r\n\r\n\tiqtree2 -t concat.treefile --gcf loci.treefile --prefix concord\r\n \t\r\nNote that `-t` accepts any reference tree (e.g., by coalescent/reconciliation approach) and `--gcf` accepts any set of trees (e.g. locus trees and bootstrap trees), which may contain a subset of taxa from the reference tree. IQ-Tree will write three files:\r\n\r\n* `concord.cf.tree`: Newick tree with gCF assigned for each internal branch of the reference tree. If the reference tree already has some branch label (such as bootstrap support in this case), gCF will be appended to the existing label separated by a `/`.\r\n* `concord.cf.branch`: Newick tree with internal branch IDs.\r\n* `concord.cf.stat`: A tab-separated table with gCF and gDF (gene discordance factor) for every internal branch (rows of the table). The ID column can be linked with `concord.cf.branch` file. This file can be read in R to do some plot (see below).\r\n\r\nIf you omit `--prefix`, all output files will be written to `concat.treefile.*`.",
      "Web server tutorial\r\nA quick starting guide for the IQ-TREE Web Server.\r\n\r\nThis tutorial explains briefly how to use the IQ-TREE web server for fast online phylogenetic inference, accessible at <a target=\"_blank\" href=\"http://iqtree.cibiv.univie.ac.at\"> <b>iqtree.cibiv.univie.ac.at</b></a>.\r\n\r\nThere are three tabs: [Tree Inference](#tree-inference), [Model Selection](#model-selection) and [Analysis Results](#analysis-results).\n\n### Analysis Results\n\nIn the tab Analysis Results you can monitor your jobs. With our example file, a run will only take a few seconds, depending on the server load. For your own alignments the CPU time limit is 24 hours. If you provided an email address when submitting the job, you will get an email once it is finished. \r\n\r\n![Analysis Results](images/tut3.png)\r\n\r\nOnce a job is finished, you can select it by checking the corresponding box and then **download the selected jobs** as a zip file. This zip file will contain the results of your run, including the **Run Log** and the **Full Result** which are also accessible in the webserver. \r\n\r\n\r\n| Suffix | Explanation |\r\n|-------------|------------------------------------------------------------------------------|\r\n| `.iqtree`   | Full result of the run, this is the main report file  |\r\n| `.log`      | Run log |\r\n| `.treefile` | Maximum likelihood tree in NEWICK format, can be visualized with treeviewer programs |\r\n| `.svg`      |  Graphical tree representation in SVG format, done with ete view |\r\n| `.pdf`      |  Graphical tree representation in PDF format, done with ete view |\r\n| `.contree`  | Consensus tree with assigned branch supports where branch lengths are optimized on the original alignment; printed if Ultrafast Bootstrap is selected |\r\n| `.ckp.gz`   | Checkpoint file; included if a job was stopped because of RAM/CPU limits |\r\n\r\n>**NOTE**: Jobs which require more than 24 hours or 1GB RAM will be stopped. In such a case, you can download the stopped job and resume the run from the last checkpoint on your local PC as [described here](Command-Reference#checkpointing-to-resume-stopped-run). \r\n\r\n[Guindon et al., 2010]: https://doi.org/10.1093/sysbio/syq010\r\n[Hoang et al., 2018]: https://doi.org/10.1093/molbev/msx281",
      "Command reference\r\nCommprehensive documentation of command-line options.\r\nIQ-TREE is invoked from the command-line with e.g.:\r\n\r\n    iqtree -s <alignment> [OPTIONS]\r\n\r\nassuming that IQ-TREE can be run by simply entering `iqtree`. If not, please change `iqtree` to the actual path of the executable or read the [Quick start guide](Quickstart).\n\n### Site-specific frequency model options\n\nThe site-specific frequency model is used to substantially reduce the time and memory requirement compared with full profile mixture models `C10` to `C60`. For full details see [site-specific frequency model](Complex-Models#site-specific-frequency-models). To use this model you have to specify a profile mixture model with e.g. `-m LG+C20+F+G` together with a guide tree or a site frequency file: \r\n\r\n| Option | Usage and meaning |\r\n|---------|------------------------------------------------------------------------------|\r\n| `-ft`   | Specify a guide tree (in Newick format) to infer site frequency profiles. |\r\n| `-fs`   | Specify a site frequency file, e.g. the `.sitefreq` file obtained from `-ft` run. This will save memory used for the first phase of the analysis. | \r\n| `-fmax` | Switch to posterior maximum mode for obtaining site-specific profiles. Default: posterior mean. |\r\n\r\nWith `-fs` option you can input a file containing your own site frequency profiles. The format of this file is that each line contains the site ID (starting from 1) and the state frequencies (20 for amino-acid) separated by white space. So it has as many lines as the number of sites in the alignment. The order of amino-acids is:\r\n\r\n\r\n     A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V",
      "Frequently asked questions\r\nFor common questions and answers.\n\n### How do I interpret ultrafast bootstrap (UFBoot) support values?\n\nThe ultrafast bootstrap (UFBoot) feature (`-bb` option) was published in ([Minh et al., 2013]). \r\nOne conclusions from the __analysis of many gene trees__ is that UFBoot support values are\r\nmore unbiased: 95% support correspond roughly to a probability of 95% that a\r\nclade is true. So this has a different meaning than the normal (more conservative) \r\nbootstrap supports.\r\nFor UFBoot, you should only start to rely on a branch if its support is >=\r\n95%. Thus, the interpretations are different and you should not compare BS% with\r\nUFBoot% directly.\r\n\r\nMoreover, it is recommended to also perform the SH-aLRT test ([Guindon et al., 2010]), \r\ne.g., by adding `-alrt 1000` into the IQ-TREE command line. Each branch will\r\nthen be assigned with SH-aLRT and UFBoot supports. One would be more confident \r\nif a clade has its SH-aLRT >= 80% and UFboot >= 95%. \r\n\r\n> NOTE: These recommendations only apply to single gene trees. If you reconstruct\r\n> a \"concatenation\" tree from many genes in a phylogenomic analysis, they do not\r\n> hold anymore. In fact, UFBoot supports and even the more conservative Felsenstein's \r\n> bootstrap supports will tend to be 100% and there has been plenty of literature\r\n> about this issue. You are recommended to compute concordance factors for\r\n> any phylogenomic analysis.",
      "Command reference\r\nCommprehensive documentation of command-line options.\r\nIQ-TREE is invoked from the command-line with e.g.:\r\n\r\n    iqtree -s <alignment> [OPTIONS]\r\n\r\nassuming that IQ-TREE can be run by simply entering `iqtree`. If not, please change `iqtree` to the actual path of the executable or read the [Quick start guide](Quickstart).\n\n### Tree topology tests\n\nIQ-TREE provides a number of tests for significant topological differences between trees. The AU test implementation in IQ-TREE is much more efficient than the original CONSEL by supporting SSE, AVX and multicore parallelization. Moreover, it is more appropriate than CONSEL for partition analysis by bootstrap resampling sites *within* partitions, whereas CONSEL is not partition-aware.\r\n\r\n>**NOTE**: There is a discrepancy between IQ-TREE and CONSEL for the AU test: IQ-TREE implements the least-square estimate for p-values whereas CONSEL provides the maximum-likelihood estimate (MLE) for p-values. Hence, the AU p-values might be slightly different. We plan to implement MLE for AU p-values in IQ-TREE soon.\r\n\r\n| Option | Usage and meaning |\r\n|-------|------------------------------------------------------------------------------|\r\n| `-z`  | Specify a file containing a set of trees. IQ-TREE will compute the log-likelihoods of all trees. |\r\n| `-zb` | Specify the number of RELL ([Kishino et al., 1990]) replicates (>=1000) to perform several tree topology tests for all trees passed via `-z`. The tests include bootstrap proportion (BP), KH test ([Kishino and Hasegawa, 1989]), SH test ([Shimodaira and Hasegawa, 1999]) and expected likelihood weights (ELW) ([Strimmer and Rambaut, 2002]). |\r\n| `-zw` | Used together with `-zb` to additionally perform the weighted-KH and weighted-SH tests. |\r\n| `-au` | Used together with `-zb` to additionally perform the approximately unbiased (AU) test ([Shimodaira, 2002]). Note that you have to specify the number of replicates for the AU test via `-zb`. |\r\n| `-n 0` | Only estimate model parameters on an initial parsimony tree and ignore a full tree search to save time. |\r\n| `-te` | Specify a fixed user tree to estimate model parameters. Thus it behaves like `-n 0` but uses a user-defined tree instead of parsimony tree. |\r\n\r\n\r\n\r\nExample usages:\r\n\r\n* Given alignment `data.phy`, test a set of trees in `data.trees` using AU test with 10,000 replicates:\r\n\r\n        iqtree -s data.phy -m GTR+G -n 0 -z data.trees -zb 10000 -au \r\n\r\n* Same above but for a partitioned data `partition.nex` and additionally performing weighted test:\r\n\r\n        iqtree -s data.phy -spp partition.nex -n 0 -z data.trees -zb 10000 -au -zw"
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  },
  {
    "question": "What software can I use to visualize the annotated species tree with concordance factors and other labels, and how do I load the tree file with edge labels into it?",
    "answer": "The provided text mentions SplitsTree as software that can visualize phylogenetic trees, specifically mentioning its ability to handle the `example.phy.splits.nex` file output by IQ-TREE, which contains branch support values for all splits (bipartitions).  This file is in Nexus format.  While the text doesn't explicitly state that SplitsTree handles Newick format directly, many phylogenetic tree visualization programs support Newick.\n\nTo import a Newick tree file (e.g., `example.phy.treefile` from the IQ-TREE output) containing branch support values into visualization software, the exact steps depend on the specific software used.  However, the general process usually involves:\n\n1. **Choosing a software:**  Many options exist beyond SplitsTree, including FigTree, Dendroscope, iTOL (Interactive Tree Of Life), and others.  Each has its own strengths and weaknesses regarding features and ease of use.\n\n2. **Opening the Newick file:** Most programs allow you to directly open a Newick file via a file selection dialog.  The software will parse the Newick format, interpreting the branch lengths and support values (often denoted as numbers within brackets, e.g., `(A:0.1,[&support=95]B:0.2);`).\n\n3. **Visualization:** The software will then display the tree, usually allowing you to customize the appearance (branch lengths, node labels, branch colors based on support values, etc.).  The specific options for customization will vary depending on the software.\n\n\nThe `change_labels.R` script described in the context provides an example of manipulating tree labels in R, but it doesn't directly address visualization.  It modifies the labels, which can then be imported into a visualization program.\n",
    "context": [
      "Beginner's tutorial\r\nThis tutorial gives a beginner's guide. \r\n\r\nPlease first [download](http://www.iqtree.org/#download) and [install](Quickstart) the binary\r\nfor your platform. For the next steps, the folder containing your  `iqtree` executable should be added to your PATH enviroment variable so that IQ-TREE can be invoked by simply entering `iqtree` at the command-line. Alternatively, you can also copy `iqtree` binary into your system search.\r\nTIP: For quick overview of all supported options in IQ-TREE, run the command  `iqtree -h`.\n\n### Assessing branch supports with ultrafast bootstrap approximation\n\nTo overcome the computational burden required by the nonparametric bootstrap, IQ-TREE introduces an ultrafast bootstrap approximation (UFBoot) ([Minh et al., 2013]; [Hoang et al., 2018]) that is  orders of magnitude faster than the standard procedure and provides relatively unbiased branch support values. Citation for UFBoot:\r\n\r\n> __D.T. Hoang, O. Chernomor, A. von Haeseler, B.Q. Minh, and L.S. Vinh__ (2018) UFBoot2: Improving the ultrafast bootstrap approximation. *Mol. Biol. Evol.*, 35:518–522. \r\n    <https://doi.org/10.1093/molbev/msx281>\r\n\r\n\r\nTo run UFBoot:\r\n\r\n    iqtree -s example.phy -m TIM2+I+G -B 1000\r\n    # for version 1.x change -B to -bb\r\n\r\n `-B`  specifies the number of bootstrap replicates where 1000\r\nis the minimum number recommended. The section  `MAXIMUM LIKELIHOOD TREE` in  `example.phy.iqtree` shows a textual representation of the maximum likelihood tree with branch support values in percentage. The NEWICK format of the tree is printed to the file  `example.phy.treefile`. In addition, IQ-TREE writes the following files:\r\n\r\n* `example.phy.contree`: the consensus tree with assigned branch supports where branch lengths are optimized  on the original alignment.\r\n*  `example.phy.splits.nex`: support values in percentage for all splits (bipartitions),\r\ncomputed as the occurence frequencies in the bootstrap trees.  This file can be viewed with the program [SplitsTree](http://www.splitstree.org) to explore the conflicting signals in the data. So it is more informative than consensus tree, e.g. you can see how highly supported the second best conflicting split is, which had no chance to enter the consensus tree. \r\n*  `example.phy.splits` (if using `-wsplits` option): This file contains the same information as `example.phy.splits.nex` but in star-dot format.\r\n\r\n>**NOTE**: UFBoot support values have a different interpretation to the standard bootstrap. Refer to [FAQ: UFBoot support values interpretation](Frequently-Asked-Questions#how-do-i-interpret-ultrafast-bootstrap-ufboot-support-values) for more information.",
      "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Put concordance factors (or other numbers!) on a tree\n\nA common aim is to annotate your tree with the statistics you are interested in. The output tree above has rather unwieldy labels on each branch like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691 7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nBut we can use the tree with branch IDs to put any label on a tree. An example is in the `change_labels.R` script. As written, this script just updates the branch ID labels in the `gcf.cf.branch` tree to show the ID and the three concordance factors (the &#936;<sub>1</sub> values), each labelled with the first letter of the input data (i.e. `g` for genes, `s` for sites, and `q` for quartets). You can run this script like so:\r\n\r\n```\r\nRscript change_labels.R\r\n```\r\n\r\nThis will output a nexus-formatted tree file called `id_gcf_scf_qcf.nex`. Each branch on this tree is labelled as follows:\r\n\r\n`391-g98.54-s84.09-q98.54`\r\n\r\nThe first number is the branch ID, and the next three are the three concordance factors. This can be useful for exploring your data. For example, if you look at the part of the species tree we inferred in this recipe that groups the kiwis (genus *Apteryx*), you can see that there is a lot of concordance in this part of the tree:\r\n\r\n![kiwis](https://github.com/iqtree/iqtree2/assets/895251/e3ab2493-4105-4099-b822-5ddc4b5583aa)\r\n\r\nThe concordance factors tell you a certain amount, but to understand things better, you really need to examine the concordance vectors. \r\n\r\n> If you want to put different labels on your tree, that is relatively simple to do by editing the `change_labels.R` script, which you can get from GitHub here: [https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R](https://github.com/roblanf/concordance_vectors/blob/main/change_labels.R)",
      "Introduction\n\n### Why IQ-TREE?\n\nThanks to the recent advent of next-generation sequencing techniques, the amount of phylogenomic/transcriptomic data have been rapidly accumulated. This extremely facilitates resolving many \"deep phylogenetic\" questions in the tree of life. At the same time it poses major computational challenges to analyze such big data, where most phylogenetic software cannot handle. Moreover, there is a need to develop more complex probabilistic models to adequately capture realistic aspects of genomic sequence evolution.\r\n\r\nThis trends motivated us to develop the IQ-TREE software with a strong emphasis on phylogenomic inference. Our goals are:\r\n\r\n* __Accuracy__: Proposing novel computational methods that perform better than existing approaches.\r\n* __Speed__: Allowing fast analysis on big data sets and utilizing high performance computing platforms.\r\n* __Flexibility__: Facilitating the inclusion of new (phylogenomic) models and sequence data types.\r\n* __Versatility__: Implementing a broad range of commonly-used maximum likelihood analyses.\r\n\r\nIQ-TREE has been developed since 2011 and freely available at <http://www.iqtree.org/> as open-source software under the [GNU-GPL license version 2](http://www.gnu.org/licenses/licenses.en.html). It is actively maintained by the core development team (see below) and a number of collabrators.\r\n\r\nThe name IQ-TREE comes from the fact that it is the successor of [**IQ**PNNI](http://www.cibiv.at/software/iqpnni/) and [**TREE**-PUZZLE](http://www.tree-puzzle.de/) software.",
      "Recipes\n\n### Phylogenetic placement\n\nThe general problem\r\n\r\nThis recipe shows you how to add new sequences to an existing tree (phylogenetic placement), then to perform a global re-optimisation of that tree.\r\n\r\nSometimes you have an existing phylogeny, and you'd like to add new sequences it without altering the existing relationships. This is increasingly common in what's called 'online phylogenetics'. For example, in an ongoing pathogen outbreak we might get a lot of new genomes arriving in our database every day. Rather than infer a new tree from scratch each day, it's better to start with yesterday's tree and just _add_ the new genomes to it. [This preprint](https://www.biorxiv.org/content/10.1101/2021.12.02.471004v2), shows some recent work on online phylogenetics, and compares a lot of different approaches. In this recipe I'll cover how to do this in a Maximum Likelihood framework using IQ-TREE.\r\n\r\n> If you have very large datasets, i.e. more than many tens of thousands of sequences, you should consider using [UShER & matOptimize](https://usher-wiki.readthedocs.io/en/latest/), or [MAPLE](https://github.com/NicolaDM/MAPLE) for your online phylogenetics analyses. These pieces of software can comfortably handle alignments of millions of sequences, with tens of thousands of new sequences being added every day. There are tradeoffs (e.g. matOptimize uses parsimony) but they are often perfectly acceptable (that's covered in the preprint linked to above).\r\n\r\n# A specific example\r\n\r\nFor this example, I'll imagine you have an existing tree and alignment of 17 sequences (`T1` to `T17`). Since estimating your tree, you've added three new sequences to your alignment (`NEW_1`, `NEW_2`, and `NEW_3`). Now you want to _add_ those new sequences to your existing tree. \r\n\r\n# Input files\r\n\r\n* `sequences.fa`: Your alignment of 20 sequences (`T1` to `T17`, and `NEW_1` to `NEW_3`)\r\n* `existing_tree.nex`: An existing tree of 17 sequences (T1 to T17)\r\n\r\n# Command line\r\n\r\n```\r\niqtree -s sequences.fa -g existing_tree.nex \r\n```\r\n\r\n* `-g` sets a constraint tree with our existing 17 sequences\r\n* `-s` passes the alignment of the existing 17 sequences and the 3 new sequences\r\n\r\nYour output tree will now look like this:\r\n\r\n```\r\n /--+ T2                                                                                                                                        \r\n |                                                                                                                                              \r\n |               /--------+ T3                                                                                                                  \r\n |              /+                                                                                                                              \r\n |              |\\-------------+ NEW 2                                                                                                          \r\n |              |                                                                                                                               \r\n |    /---------+                           /--+ T9                                                                                             \r\n |    |         |                        /--+                                                                                                   \r\n |    |         \\------------------------+  \\--+ NEW 3                                                                                          \r\n +----+                                  |                                                                                                      \r\n |    |                                  \\-------+ T11                                                                                          \r\n |    |                                                                                                                                         \r\n |    \\---------------------+ T4                                                                                                                \r\n |                                                                                                                                              \r\n=+                                                                                /-+ T5                                                        \r\n |                                                                                |                                                             \r\n |                                                                /---------------+                               /----------------------+ T17  \r\n |                                                                |               \\-------------------------------+                             \r\n |                                         /----------------------+                                               \\---+ NEW 1                   \r\n |                                         |                      |                                                                             \r\n |                                         |                      |     /------------+ T13                                                      \r\n |                                         |                      \\-----+                                                                       \r\n |                                       /-+                            \\--------+ T15                                                          \r\n |                                       | |                                                                                                    \r\n |                                       | |      /----+ T6                                                                                     \r\n |                                       | |/-----+                                                                                             \r\n |                                       | \\+     \\----+ T10                                                                                    \r\n \\---------------------------------------+  |                                                                                                   \r\n                                         |  \\----+ T7                                                                                           \r\n                                         |                                                                                                      \r\n                                         |   /-----------------+ T8                                                                             \r\n                                         |   |                                                                                                  \r\n                                         \\---+     /-------+ T12                                                                                \r\n                                             |     |                                                                                            \r\n                                             \\-----+                        /--------------+ T14                                                \r\n                                                   |                        |                                                                   \r\n                                                   \\------------------------+      /-+ T1                                                       \r\n                                                                            \\------+                                                            \r\n                                                                                   \\-----------+ T16                                            \r\n                                                                                                                                                \r\n |---------------------------------|--------------------------------|---------------------------------|--------------------------------|--      \r\n 0                              0.25                              0.5                              0.75                                1        \r\n substitutions/site                                                                                                                             \r\n```\r\n\r\n# Explanation \r\nOur sequence alignment contains 20 sequences: T1 to T17, and NEW_1 to NEW_3. The sequences T1 to T17 all appear in our tree `existing_tree.nex`. The option `-g` uses `existing_tree.nex` as a constraint tree, which means that the topology of T1 to T17 will be fixed for this analysis. The sequences `NEW_1`, `NEW_2`, and `NEW_3` are not in the constraint tree. So, IQ-TREE will initially place these sequences onto the constraint tree using Maximum Parsimony, and then it will do standard ML optimisation of the tree without altering the underlying constraint tree. In other words, it will use the standard IQ-TREE search algorithm to try moving `NEW_1`, `NEW_2`, and `NEW_3` around on the constraint tree, and will keep these changes if they improve the likelihood. This optimisation helps for two reasons. First, placing sequences with sequential parsimony placement doesn't always give you the best parsimony placement, and second, even the best parsimony placement can differ from the best placement under a full Likelihood model. \r\n\r\n\r\n# Adding global optimisation\r\n\r\nIn some cases, e.g. if you've added a lot of new sequences to an existing tree, you might want to then re-optimise the tree _without_ the constraints. This is typically what we do for most online phylogenetics applications, for example. To do this, you would use the following options:\r\n\r\n* `-t` to set the starting tree\r\n* `-s` to pass the alignment\r\n\r\ni.e.\r\n\r\n```\r\niqtree -s sequences.fa -t sequences.treefile -pre reoptimised\r\n```\r\n\r\nThis commandline simply uses the tree output from the first commandline (`sequences.treefile`) as the starting tree for a new analysis. That way you start from the best estimate of the tree you have, and IQ-TREE will then try to further optimise it in the absence of constraints.\r\n\r\n# How to build this example yourself\r\n\r\nHere's some code to build this example yourself from scratch. Note that this assumes you're working on Unix, and you'll need [`newick_utils`](https://anaconda.org/bioconda/newick_utils) for this to work. \r\n\r\n```\r\n# simulate an alignment of 20 sequences (set the seed for reproducibility only)\r\niqtree2 --alisim sequences -t RANDOM{yh/20} -seed 438579088 -af fasta -m JC\r\n\r\n# check the names\r\ngrep '>' sequences.fa\r\n\r\n# replace names of 3 of them to be 'NEW_N'\r\nsed -i -e 's/T18/NEW_1/g' sequences.fa\r\nsed -i -e 's/T19/NEW_2/g' sequences.fa\r\nsed -i -e 's/T20/NEW_3/g' sequences.fa\r\n\r\n# check the names again\r\ngrep '>' sequences.fa\r\n\r\n# prune the NEW_N sequences from the tree using newick_utils\r\nnw_prune sequences.treefile T18 T19 T20 > existing_tree.nex\r\n\r\n# check that you have the files you need\r\nls -lh\r\n\r\n# run IQ-TREE to add NEW_N seqs back\r\niqtree -g existing_tree.nex -s sequences.fa -pre seqs_added -seed 438579088\r\n\r\n# optional: do a global re-optimisation of the tree, using previous tree as start\r\niqtree -s sequences.fa -t seqs_added.treefile -pre re_optimised -seed 438579088\r\n```\r\n\r\n# IQ-TREE version\r\nLast tested with IQ-TREE 2.2.0.3",
      "Phylogenetic Dating\r\n\r\nBayesian dating with MCMCtree\r\n\r\n\r\nFrom IQ-TREE 2.5 onwards, we provide the functionality in IQ-TREE to infer time trees\r\nusing Bayesian MCMCtree method.\r\n\r\nIf you use this feature, please cite:\r\n\r\n> __P. Demotte, M. Panchaksaram, N. Ly-Trong, M. dos Reis  and B.Q. Minh__\r\n>(2025) IQ2MC: A New Framework to Infer Phylogenetic Time Trees Using IQ-TREE\r\n>and MCMCtree.\n\n### Using partitions and Mixture models for approximate likelihood dating\n\nIQ-TREE supports three partition models for approximate likelihood dating. Under\r\nthe Edge-unlinked (EUL) model, IQ-TREE generates the Hessian file which contains\r\nseparate gradients and Hessian for each partition. For the Edge-linked (EL) \r\npartition model, the Hessian file contains only one gradient vector and a\r\nHessian as branches are shared across partitions. \r\n\r\nSince IQ-TREE supports RAxML and NEXUS style partitions input file, you can use\r\npartitions defined in the following format.\r\n\r\n```\r\nDNA, part1 = 1-100\r\nDNA, part2 = 101-450\r\n```\r\nIf your partition file is called `example.nex`,\r\n\r\n```\r\niqtree -s example.phy  -Q example.nex -m GTR+G4 -te example_tree.nwk --dating mcmctree \r\n```\r\n\r\nHere, IQ-TREE generates the Hessian file using the `GTR+G4` model for all\r\npartitions. If you need to use different models for each partition, you need to\r\ncreate a more flexible NEXUS file like the following.\r\n\r\n```\r\n#nexus\r\nbegin sets;\r\n    charset part1 = 1-100;\r\n    charset part2 = 101-450;\r\n    charpartition mine = GTR+G4:part1, HKY:part2;\r\nend;\r\n```\r\nHere, IQ-TREE uses `GTR+G4` model for partition 1, and `HKY` model for partition\r\n2 respectively. Using `-q` and `-p` options, you can generate the Hessian file\r\nwhich considers `edge-linked equal branch partition models` and `edge-linked\r\nproportional branch length models` respectively.\r\n\r\nIQ-TREE also supports mixture models for the Hessian file generation. You can\r\nsimply specify DNA or Amino Acid Mixture model as following,\r\n\r\n```\r\niqtree -s example.phy  -m \"MIX{GTR,HKY}+G4\" -te example_tree.nwk –-dating mcmctree \r\n```\r\nIf you need to use an Amino Acid profile mixture model such as C60 model,\r\n\r\n```\r\niqtree -s example.phy  -m LG+G4+C60 -te example_tree.nwk –-dating mcmctree \r\n```\r\nIf you are using ModelFinder or MixtureFinder, you need to follow a two-step\r\napproach. First, you can estimate the best-fit model for the data using\r\nModelFinder or MixtureFinder. Then, the Hessian file can be generated using\r\n`--dating mcmctree` option using the estimated models."
    ],
    "groundTruth": "Recipes\r\nEstimating gene, site, and quartet concordance vectors\n\n### Estimating concordance vectors and support values\n\nNow we want to calculate gene, site, and quartet concordance vectors, and posterior probabilities (support values calculated by ASTRAL) for every branch in our species tree. To do that, we need our species tree (of course); our gene trees (gene and quartet concordance vectors are calculated from these); our alignments (site concordance vectors are calculated from these).\r\n\r\n> Note that concordance factors and support values apply to *branches* in trees, not nodes. \r\n\r\nEstimate the support and quartet concordance vectors in ASTRAL\r\n\r\nWe use ASTRAL to calculate quartet concordance vectors and posterior support values (which are calculated from the quartet support values, see below for an explanation of both). \r\n\r\n* `-q` tells ASTRAL to use a fixed tree topology, we use the species tree we calculated above\r\n* `-t 2` tells ASTRAL to calculate all of the things we need and annotate the tree with them\r\n\r\n```bash\r\nastral -q astral_species.tree -i loci.treefile -t 2 -o astral_species_annotated.tree 2> astral_species_annotated.log\r\n```\r\n\r\nThere are two output files here, which you can download here: \r\n[astral_annotated.zip](https://github.com/user-attachments/files/15908295/astral_annotated.zip)\r\n\r\n\r\n* `astral_species_annotated.tree`: the species tree with annotations on every branch \r\n* `astral_species_annotated.log`: the log file for ASTRAL\r\n\r\nThe annotated tree contains a lot of extra information on every branch, e.g.:\r\n\r\n```\r\n[q1=0.9130236794171221;q2=0.04753773093937029;q3=0.03943858964350768;f1=334.1666666666667;f2=17.398809523809526;f3=14.43452380952381;pp1\r\n=1.0;pp2=0.0;pp3=0.0;QC=200178;EN=366.0]\r\n```\r\n\r\nThese are explained in detail in the [ASTRAL tutorial](https://github.com/smirarab/ASTRAL/blob/master/astral-tutorial.md), but for our purposes we are interested in:\r\n\r\n* `q1`, `q2`, and `q3`: form the quartet concordance vector (ASTRAL calls these 'quartet frequencies', 'normalised quartet frequencies', and sometimes 'quartet support values'; we argue in our paper that they are very much *not* support values)\r\n* `pp1`: the ASTRAL posterior probability for a branch (roughly, the probability that `q1` is the highest of the three q values)\r\n\r\nEstimate the gene and site concordance vectors in IQ-TREE\r\n\r\nWe use IQ-TREE to calculate gene and site concordance vectors (for more details see the [concordance factor page](http://www.iqtree.org/doc/Concordance-Factor)).\r\n\r\nIn the following command lines:\r\n\r\n* `-te` tells IQ-TREE to use a fixed input tree (note that the tree we pass with `-te` differs in the two commands: the latter command uses the tree output by the former command, which sequentially adds to the labels on the tree for convenience)\r\n* `--gcf` is the command to calculate the gCF using the gene trees we estimated above\r\n* `-prefix` is the prefix for the output files\r\n* `-T` is the number of threads (change this to suit your machine)\r\n* `--scfl 100` is the command to calculate the likelihood-based sCF with 100 replicates\r\n* `-p loci.best_model.nex` tells IQ-TREE to use the loci from `bird_400` and the models we estimated previously when calculating the gene trees (this saves a huge amount of time)\r\n\r\n```bash\r\n# first calculate the site concordance vectors\r\niqtree2 -te astral_species_annotated.tree -p loci.best_model.nex --scfl 100 --prefix scfl -T 128\r\n\r\n# next calculate the gene concordance vectors\r\niqtree2 -te scfl.cf.tree --gcf loci.treefile --prefix gcf -T 128\r\n\r\n# finally we do a dummy analysis in IQ-TREE. The only point of this is to get the branch lengths in coalescent units \r\n# from the ASTRAL analysis, in a format that is output by IQ-TREE in a convenient table with IQ-TREE branch ID's \r\n# note the -blfix option, which keeps the original branch lengths - this makes the scfs meaningless, but is here \r\n# simply to allow us to extract branch lengths in coalescent units frmo the ASTRAL tree in a convenient table\r\n# we set scfl to 1, which saves time given the scfs are already meaningless, never use the sCFs from this analysis!!!\r\niqtree2 -te astral_species_annotated.tree -blfix -p loci.best_model.nex --scfl 1 --prefix coalescent_bl -T 128\r\n```\r\n\r\nThese three command lines will produce a lot of output files, but the key files are:\r\n\r\n* `gcf.cf.stat`: a table with the gCF values, as well as gDF1, gDF2, gDFP, and many other things (including all the ASTRAL labels)\r\n* `scfl.cf.stat`: the equivalent table for scfl values (including all the ASTRAL labels)\r\n* `coalescent_bl.cf.stat`: the dummy table from which we'll get our coalescent branch lengths\r\n* `gcf.cf.tree`: the tree file with lots of annotations about concordance factors (plus all the ASTRAL annotations) \r\n* `gcf.cf.branch`: the tree file annotated with branch IDs that match those in the `.stat` files\r\n\r\nYou can download these files here: \r\n[stat_and_tree_files.zip](https://github.com/user-attachments/files/15949173/stat_and_tree_files.zip)\r\n\r\nEach internal branch in `gcf.cf.tree` will be annotated like this:\r\n\r\n`'[q1=0.570241231975882;q2=0.17602481596980715;q3=0.25373395205431093;f1=207.567808439221;f2=64.0730330130098;f3=92.3591585477691\r\n7;pp1=1.0;pp2=1.575119358351017E-20;pp3=2.952157354351003E-20;QC=8496;EN=364.0]'/25.4/47.0:0.0055956557`\r\n\r\nThis doesn't contain all the information for the concordance vectors (see below for that) but it's still very useful:\r\n\r\n* `q1=0.570241231975882`: this is the quartet concordance factor\r\n* `25.4`: this is the site concordance factor\r\n* `47.0`: this is the gene concordance factor\r\n* `0.0055956557` this is the branch length in **substitutions per site** calculated when we calculated the site concordance factors\r\n\r\nView the tree file\r\n\r\nOne useful thing to do is to look at these labels in the context of your species tree. To do this, you can open the file `gcf.cf.tree` in a tree viewer like [DendroScope](https://github.com/husonlab/dendroscope3/releases/latest). Just load the tree in Dendroscope, specify that the labels are edge labels when you are asked, and that's it. You can then re-root the tree, change the layout, and zoom in and out to see the edge labels you are interested in. However, the edge labels so far don't contain the full concordance vectors, so we'll get those next."
  }
]